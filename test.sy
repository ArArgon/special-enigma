
//int a0;
/*
    compile_unit (1)
    declaration (1)
      INT (1)
    init_declarator_list (1)
    IDENTIFIER: a


*/

//int a1,b1;
/*
  compile_unit (1)
  declaration (2)
    INT (2)
  init_declarator_list (2)
    init_declarator_list (2)
    IDENTIFIER: a1
  IDENTIFIER: b1
*/

//const int x=4;
/*
  compile_unit (23)
  declaration (23)
    INT (23)
      CONST (23)
  init_declarator_list (23)
  ASSIGN (23)
    IDENTIFIER: x
  CONSTANT: 4
*/

//int c0[3][3][3];
/*
  compile_unit (35)
  declaration (35)
    INT (35)
  init_declarator_list (35)
  direct_declarator (35)
    direct_declarator (35)
      direct_declarator (35)
        IDENTIFIER: c0
      CONSTANT: 3
    CONSTANT: 3
  CONSTANT: 3
*/

//int c[10];
/*
  compile_unit (50)
  declaration (50)
    INT (50)
  init_declarator_list (50)
  direct_declarator (50)
    IDENTIFIER: c
  CONSTANT: 10
*/

//int a[4][2]={1,2,3,4,5,6,7,8};
/*
  compile_unit (61)
  declaration (61)
    INT (61)
  init_declarator_list (61)
  ASSIGN (61)
    direct_declarator (61)
      direct_declarator (61)
        IDENTIFIER: c1
      CONSTANT: 4
    CONSTANT: 2
  initializer_list (61)
    initializer_list (61)
      initializer_list (61)
        initializer_list (61)
          initializer_list (61)
            initializer_list (61)
              initializer_list (61)
                initializer_list (61)
                CONSTANT: 1
              CONSTANT: 2
            CONSTANT: 3
          CONSTANT: 4
        CONSTANT: 5
      CONSTANT: 6
    CONSTANT: 7
  CONSTANT: 8
*/

//const int c3[5]={0,1,2,3,4};
/*
  compile_unit (91)
  declaration (91)
    INT (91)
      CONST (91)
  init_declarator_list (91)
  ASSIGN (91)
    direct_declarator (91)
      IDENTIFIER: c3
    CONSTANT: 5
  initializer_list (91)
    initializer_list (91)
      initializer_list (91)
        initializer_list (91)
          initializer_list (91)
          CONSTANT: 0
        CONSTANT: 1
      CONSTANT: 2
    CONSTANT: 3
  CONSTANT: 4
*/

//int d[3][2]={{1,2},{3},{5}};
/*
  compile_unit (114)
  declaration (114)
    INT (114)
  init_declarator_list (114)
  ASSIGN (114)
    direct_declarator (114)
      direct_declarator (114)
        IDENTIFIER: d
      CONSTANT: 3
    CONSTANT: 2
  initializer_list (114)
    initializer_list (114)
      initializer_list (114)
      initializer_list (114)
        initializer_list (114)
        CONSTANT: 1
      CONSTANT: 2
    initializer_list (114)
    CONSTANT: 3
  initializer_list (114)
  CONSTANT: 5
*/

//int d1[3][2]={1,2,{3},5};
/*
  compile_unit (139)
  declaration (139)
    INT (139)
  init_declarator_list (139)
  ASSIGN (139)
    direct_declarator (139)
      direct_declarator (139)
        IDENTIFIER: d1
      CONSTANT: 3
    CONSTANT: 2
  initializer_list (139)
    initializer_list (139)
      initializer_list (139)
        initializer_list (139)
        CONSTANT: 1
      CONSTANT: 2
    initializer_list (139)
    CONSTANT: 3
  CONSTANT: 5
*/

//int d2[3][2]={{},{3,4},5,6};
/*
  compile_unit (162)
  declaration (162)
    INT (162)
  init_declarator_list (162)
  ASSIGN (162)
    direct_declarator (162)
      direct_declarator (162)
        IDENTIFIER: d2
      CONSTANT: 3
    CONSTANT: 2
  initializer_list (162)
    initializer_list (162)
      initializer_list (162)
        initializer_list (162)
        initializer_list (162)
      initializer_list (162)
        initializer_list (162)
        CONSTANT: 3
      CONSTANT: 4
    CONSTANT: 5
  CONSTANT: 6
*/

//int c2[4][2]={{a[0][0],a[0][1]},{3,4},{5,6},{7,8}};
/*
  compile_unit (91)
  declaration (91)
    INT (91)
  init_declarator_list (91)
  ASSIGN (91)
    direct_declarator (91)
      direct_declarator (91)
        IDENTIFIER: c2
      CONSTANT: 4
    CONSTANT: 2
  initializer_list (91)
    initializer_list (91)
      initializer_list (91)
        initializer_list (91)
        initializer_list (91)
          initializer_list (91)
          postfix_expression (91)
            postfix_expression (91)
              IDENTIFIER: a
            CONSTANT: 0
          CONSTANT: 0
        postfix_expression (91)
          postfix_expression (91)
            IDENTIFIER: a
          CONSTANT: 0
        CONSTANT: 1
      initializer_list (91)
        initializer_list (91)
        CONSTANT: 3
      CONSTANT: 4
    initializer_list (91)
      initializer_list (91)
      CONSTANT: 5
    CONSTANT: 6
  initializer_list (91)
    initializer_list (91)
    CONSTANT: 7
  CONSTANT: 8
*/
/*int main(){
  return 0;
}*/
/*
  compile_unit (229)
  function_definition (229)
    INT (229)
    direct_declarator (229)
      IDENTIFIER: main
  blockitem_list (230)
  RETURN (230)
  CONSTANT: 0
*/
/*
int main(int a){
  return 0;
}*/
/*
  compile_unit (243)
  function_definition (243)
    INT (243)
    direct_declarator (243)
      IDENTIFIER: main
    parameter_list (243)
    parameter_declaration (243)
      INT (243)
    IDENTIFIER: a
  blockitem_list (244)
  RETURN (244)
  CONSTANT: 0
*/
/*
void main(){
  return;
}*/
/*
  compile_unit (261)
  function_definition (261)
    VOID (261)
    direct_declarator (261)
      IDENTIFIER: main
  blockitem_list (262)
  RETURN (262)
  */

  // Use return value of a function as array's index
/*
int _getMaxOfAll(int result[], int size) {
    int maxNum;
    maxNum = -999999;
    size = size - 1;
    while(size > -1) {
        if (result[size] > maxNum) {
            maxNum = result[size];
        }
        size = size - 1;
    }
    return maxNum;
}

int main() {
    int result[3];
    result[0] = -2;
    result[1] = 2;
    result[2] = -7;
    int x;
    x = result[_getMaxOfAll(result, 3)];
    putint(x);
    return 0;
}
*/
/* compile_unit (275)
    compile_unit (275)
    function_definition (275)
      INT (275)
      direct_declarator (275)
        IDENTIFIER: _getMaxOfAll
      parameter_list (275)
        parameter_list (275)
        parameter_declaration (275)
          INT (275)
        direct_declarator (275)
          IDENTIFIER: result
      parameter_declaration (275)
        INT (275)
      IDENTIFIER: size
    blockitem_list (276)
      blockitem_list (276)
        blockitem_list (276)
          blockitem_list (276)
            blockitem_list (276)
            declaration (276)
              INT (276)
            init_declarator_list (276)
            IDENTIFIER: maxNum
          expression_statement (277)
          ASSIGN (277)
            IDENTIFIER: maxNum
          SUB (277)
          CONSTANT: 999999
        expression_statement (278)
        ASSIGN (278)
          IDENTIFIER: size
        SUB (278)
          IDENTIFIER: size
        CONSTANT: 1
      while_statement (279)
        GT (279)
          IDENTIFIER: size
        SUB (279)
        CONSTANT: 1
      blockitem_list (280)
        blockitem_list (280)
        if_statement (280)
          GT (280)
            postfix_expression (280)
              IDENTIFIER: result
            IDENTIFIER: size
          IDENTIFIER: maxNum
        blockitem_list (281)
        expression_statement (281)
        ASSIGN (281)
          IDENTIFIER: maxNum
        postfix_expression (281)
          IDENTIFIER: result
        IDENTIFIER: size
      expression_statement (283)
      ASSIGN (283)
        IDENTIFIER: size
      SUB (283)
        IDENTIFIER: size
      CONSTANT: 1
    RETURN (285)
    IDENTIFIER: maxNum
  function_definition (288)
    INT (288)
    direct_declarator (288)
      IDENTIFIER: main
  blockitem_list (289)
    blockitem_list (289)
      blockitem_list (289)
        blockitem_list (289)
          blockitem_list (289)
            blockitem_list (289)
              blockitem_list (289)
                blockitem_list (289)
                declaration (289)
                  INT (289)
                init_declarator_list (289)
                direct_declarator (289)
                  IDENTIFIER: result
                CONSTANT: 3
              expression_statement (290)
              ASSIGN (290)
                postfix_expression (290)
                  IDENTIFIER: result
                CONSTANT: 0
              SUB (290)
              CONSTANT: 2
            expression_statement (291)
            ASSIGN (291)
              postfix_expression (291)
                IDENTIFIER: result
              CONSTANT: 1
            CONSTANT: 2
          expression_statement (292)
          ASSIGN (292)
            postfix_expression (292)
              IDENTIFIER: result
            CONSTANT: 2
          SUB (292)
          CONSTANT: 7
        declaration (293)
          INT (293)
        init_declarator_list (293)
        IDENTIFIER: x
      expression_statement (294)
      ASSIGN (294)
        IDENTIFIER: x
      postfix_expression (294)
        IDENTIFIER: result
      postfix_expression (294)
        IDENTIFIER: _getMaxOfAll
      argument_expression_list (294)
        argument_expression_list (294)
        IDENTIFIER: result
      CONSTANT: 3
    expression_statement (295)
    postfix_expression (295)
      IDENTIFIER: putint
    argument_expression_list (295)
    IDENTIFIER: x
  RETURN (296)
  CONSTANT: 0
  */
/*
  int main(int c[], int d[][3]){
  return 0;
  }
*/
/*
compile_unit (425)
  function_definition (425)
    INT (425)
    direct_declarator (425)
      IDENTIFIER: main
    parameter_list (425)
      parameter_list (425)
        parameter_list (425)
          parameter_list (425)
          parameter_declaration (425)
            INT (425)
          IDENTIFIER: a
        parameter_declaration (425)
          INT (425)
        IDENTIFIER: b
      parameter_declaration (425)
        INT (425)
      direct_declarator (425)
        IDENTIFIER: c
    parameter_declaration (425)
      INT (425)
    direct_declarator (425)
      direct_declarator (425)
        IDENTIFIER: d
    CONSTANT: 3
  blockitem_list (426)
  RETURN (426)
  CONSTANT: 0
*/
/*
int main(){
  a = 6*b+c/d;
  while(a>0)
  {
    a=a+1;
    if(a>0)
    {
      a=a+1;
      a=a+1;
    }
    else{
      a=a+1;
      a=a+1;
    }
    b=c+a;
  }
  return 0;
}
*/

//int b,c;
//int arr[2][2];
//int array[3];
//int j[4];
//int main(){
//  int a[2][3];
//  finc(a);
//  int b[2] = {};
  
  //int c[2] = {1,2};
  //int b = a;
  //int c = 3+2*c;
  //a=a+60;
  //a[j][1] = a[i][2];
  //b = arr[i][2][j];
  //j[1+1] = -1;
  //b = array[3 - field[0]];
  //d = func(b, arr);
  //c = -(a + b);
  //c = +(a + b);
  //a = a + c * d - b % (a + d) / a;
  //func2(arr, b, c);
//  func3();
  //arr[1] = arr2[2][2] + arr3[4];
//}
//    std::cout<<"!!!"<<std::endl;
/*
while(temp)
{
    declStack.push(temp);
    temp=temp->left;
}
while(!declStack.empty())
{
    temp = declStack.top()->right;
    declStack.pop();
    trans_declaration_IR(temp, type, isconst, isglobal);
}
*/


//$$=new_node("blockitem_list",1,$1); $$->left=NULL;
/*
expression_statement: 
	";" {$$=NULL;}
	| expression ";" {$$=new_node_r("expression_statement",$1);}
	;
block: 
	"{" "}" {$$=NULL;}
	| "{" blockitem_list "}" {$$=$2;}
	;
initializer: 
	assignment_expression {$$=$1;} 
    | "{" "}" {$$=NULL;}
*/
/*
int b[2];
int func(int a, int b[][2])
{
  func(a, b);
  c0 = b[2][2];
}
*/


int main()
{
while(a>0)
{
  while(b>0)
  {
    while(c>3)
      break;
    b = c;
  }
  a=a+1;
}
return 0;
}

